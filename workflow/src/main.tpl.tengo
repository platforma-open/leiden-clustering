wf := import("@platforma-sdk/workflow-tengo:workflow")
exec := import("@platforma-sdk/workflow-tengo:exec")
assets:= import("@platforma-sdk/workflow-tengo:assets")
xsv := import("@platforma-sdk/workflow-tengo:pframes.xsv")
pframes := import("@platforma-sdk/workflow-tengo:pframes")
pSpec := import("@platforma-sdk/workflow-tengo:pframes.spec")

pfLeidenConv := import(":pf-leiden-conv")

wf.prepare(func(args){
	return {
		resolvedInput: wf.resolve(args.principalComponentsRef, { errIfMissing: true })
	}
})

wf.body(func(args) {

	blockId := wf.blockId().getDataAsJson()
	embeddings := args.resolvedInput
	inputSpec := embeddings.spec

	resolution := args.resolution
	// nNeighbors := args.nNeighbors

	csvEmbeddings := xsv.exportFrame([embeddings], "csv", {})

	leidenClustering := exec.builder().
		software(assets.importSoftware("@platforma-open/milaboratories.leiden-clustering.software:calculate-leiden-clusters")).
		addFile("embeddings.csv", csvEmbeddings).
		arg("--input_csv").arg("embeddings.csv").
		arg("--output_csv").arg("leiden_clusters.csv").
		// arg("--n_neighbors").arg(nNeighbors).
		arg("--leiden_resolution").arg(string(resolution)).
		saveFile("leiden_clusters.csv").
		printErrStreamToStdout().
		saveStdoutContent().
		cache(24 * 60 * 60 * 1000).
		run()

	leidenImportParams := pfLeidenConv.getColumns(blockId, inputSpec, resolution)
	leidenPf := xsv.importFile(leidenClustering.getFile("leiden_clusters.csv"), "csv", leidenImportParams, {splitDataAndSpec: true})

	trace := pSpec.makeTrace(inputSpec,
		{type: "milaboratories.leiden-clustering", id: blockId, importance: 40, label: "Leiden Clustering - "}
	)

	// Build leiden clusters pFrame with trace injection
	leidenOutputPf := pframes.pFrameBuilder()
	for k, v in leidenPf {
		leidenOutputPf.add(k, trace.inject(v.spec), v.data)
	}
	leidenOutputPf = leidenOutputPf.build()

	return {
		outputs: {
			leidenClusters: pframes.exportFrame(leidenOutputPf)
		},
		exports: {
			pf: leidenOutputPf
		}
	}
})

